stages:
  - Unit Tests
  - Poetry Build
  - Docker Build

variables:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.1.5"

.poetry_image:
  image: python:$PYTHON_VERSION
  before_script:
    - echo "Fetching & Installing Poetry"
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - $([ ! -z $POETRY_VERSION ] && echo "--version $POETRY_VERSION")
    - echo "Configuring Current Shell"
    - source $HOME/.poetry/env

Run Unit Tests:
  stage: Unit Tests
  extends:
    - .poetry_image
  script:
    - poetry install
    - poetry run pytest

Build with Poetry:
  stage: Poetry Build
  extends:
    - .poetry_image
  script:
    - echo "Building Project"
    - poetry build
    - echo "Extracting Version"
    - poetry version -s > ./version
  artifacts:
    paths:
      - dist/*
      - ./version

Build Docker Container:
  stage: Docker Build
  before_script:
    - echo ${DOCKER_API_KEY} | docker login -u ${DOCKER_USERNAME} --password-stdin ${DOCKER_REPO_URL}
  script:
    - CONTAINER_PATH=${DOCKER_REPO_URL}/${CI_PROJECT_PATH}
    - CONTAINER_TAGS="${CONTAINER_PATH}:${CI_COMMIT_SHORT_SHA}"
    - >
      docker build --no-cache
      $(for CONTAINER_TAG in ${CONTAINER_TAGS}; do echo "-t $CONTAINER_TAG "; done)
      -f Dockerfile
      --build-arg PYTHON_VERSION="${PYTHON_VERSION}"
      --build-arg BUILD_DATE="$(date -u)"
      --build-arg BUILD_REPO="${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}"
      --build-arg BUILD_HASH="${CI_COMMIT_SHA}"
      --build-arg APP_VERSION=$(cat ./version)
      .
    - for CONTAINER_TAG in ${CONTAINER_TAGS}; do echo "Pushing Container ${CONTAINER_TAG}"; docker push ${CONTAINER_TAG}; done
    - 'echo "Pushed Container Image(s): ${CONTAINER_TAGS}"'
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
